#!/bin/bash
RB_AUTOBUILD_VERBOSE=${RB_AUTOBUILD_VERBOSE:-0};
LANG=C

# COLORS
red=$(tput setaf 1);
green=$(tput setaf 2);
yellow=$(tput setaf 3);
cyan=$(tput setaf 6);
white=$(tput setaf 7);
none=$(tput sgr0);

# MAIN
function main()
{
    case $1 in
        prepare)
            prepare;
        ;;

        unpack)
            unpack;
        ;;

        pack)
            pack;
        ;;

        build)
            build;
        ;;

        *)
            echo "Usage: $0 unpack|prepare|build|pack";
            exit 1;
        ;;
    esac;
}

function prepare()
{
    OLDIFS=$IFS;
    IFS=$(echo -ne "\n\b");
    count=${#RB_AUTOBUILD_PACKAGES[@]};
    c=0;
    for package in ${RB_AUTOBUILD_PACKAGES[@]}; do
        let c=$c+1;
        if [[ ${package:0:1} == "#" ]]; then
            continue;
        fi;

        pkgname="${white}${package}${none}";
        msg_stat " ($c/${count}) Preparing sources for ${pkgname}...";
        if check_source "${package}"; then
            msg_done_before;
            continue;
        fi;

        diff "${RB_ABSDIR}/${package}" "${RB_ALARMDIR}/${package}";
        src=""
        ask_copy;
        case $? in
            3)
                msg_stat " ($c/${count}) Copying sources for ${pkgname} from ABS...";
                src=${RB_ABSDIR};
            ;;
            2)
                msg_stat " ($c/${count}) Copying sources for ${pkgname} from ALARM...";
                src=${RB_ALARMDIR};
            ;;
            1)
                msg_skip "Skipping package ${pkgname}.";
                continue;
            ;;
            0)
                exit 1;
            ;;
        esac

        if ! copy_source "${package}" "${src}"; then
            msg_error "Copying failed!";
            exit 2;
        fi;

        msg_done;
    done;

    IFS=$OLDIFS;
}

function unpack()
{
    OLDIFS=$IFS;
    IFS=$(echo -ne "\n\b");
    count=${#RB_AUTOBUILD_PACKAGES[@]};
    c=0;
    for package in ${RB_AUTOBUILD_PACKAGES[@]}; do
        let c=$c+1;
        if [[ ${package:0:1} == "#" ]]; then
            continue;
        fi;

        pkgname="${white}${package}${none}";
        msg_stat " ($c/${count}) Unpacking sources for ${pkgname}...";

        unpack_source "${package}";
        case $? in
            0)
                msg_done;
            ;;

            1)
                msg_skip "Source for ${pkgname} already unpacked!";
            ;;
            2)
                msg_error "Copying failed!";
                exit 2;
            ;;
        esac
    done;

    IFS=$OLDIFS;
}

function pack()
{
    OLDIFS=$IFS;
    IFS=$(echo -ne "\n\b");
    count=${#RB_AUTOBUILD_PACKAGES[@]};
    c=0;
    for package in ${RB_AUTOBUILD_PACKAGES[@]}; do
        let c=$c+1;
        if [[ ${package:0:1} == "#" ]]; then
            continue;
        fi;

        pkgname="${white}${package}${none}";
        msg_stat " ($c/${count}) Packing sources for ${pkgname}...";

        pack_source "${package}";
        case $? in
            0)
                msg_done;
            ;;

            1)
                msg_error "Copying failed!";
                exit 2;
            ;;
        esac
    done;

    IFS=$OLDIFS;
}

function build()
{
    OLDIFS=$IFS;
    IFS=$(echo -ne "\n\b");
    count=${#RB_AUTOBUILD_PACKAGES[@]};
    c=0;
    for package in ${RB_AUTOBUILD_PACKAGES[@]}; do
        let c=$c+1;
        if [[ ${package:0:1} == "#" ]]; then
            msg_stat "${white}${package:1}...${none}";
            if ! ask_continue; then
                exit 1;
            fi;

            continue;
        fi;
        pkgname="${white}${package}${none}";
        msg_stat " ($c/${count}) Building package ${pkgname}...";
        if ! check_source ${package}; then
            msg_error "Missing source files for ${pkgname}!";
            exit 2;
        fi;

        check_package ${package};
        case $? in
            2)
                msg_skip "Skipping package ${pkgname}.";
                continue;
            ;;

            1)
                msg_done_before;
                continue;
            ;;
        esac;

        if ! download_sources ${package}; then
            msg_error "Cannot download sources for ${pkgname}!";
        fi;

        skip=0;
        while check_package ${package}; do
            if ! check_build ${package}; then
                msg_error "Package already built but not installed!";
                ask_install;
                case $? in
                    2)
                        msg_stat "Installing package ${pkgname}...";
                        install_package ${package} || exit 1;
                        msg_done;
                        break;
                    ;;

                    1)
                        msg_stat "Building package ${pkgname}...";
                    ;;

                    0)
                        exit 1;
                    ;;
                esac;
            fi;

            if ! prepare_package ${package} || ! build_package ${package} || ! install_package ${package}; then
                msg_error "Building error!";
                show_log ${package};
                echo "Now you have time to fix the package ${package}.";
                ask_retry;
                case $? in
                    2)
                        msg_stat "Building package ${pkgname}...";
                        continue;
                    ;;

                    1)
                        msg_skip "Skipping package ${pkgname}.";
                        run ${package} touch "${RB_WORKDIR}/build/${package}/.skipped";
                        skip=1;
                        break;
                    ;;

                    0)
                        exit 1;
                    ;;
                esac;
            fi;
        done;

        if [[ ${skip} != 1 ]]; then
            msg_done;
        fi;
    done;

    IFS=$OLDIFS;
}

# FUNCTIONS
_prev="";
function msg_stat()
{
    date=$(date +"%Y-%m-%d %H:%M:%S");
    message="[${date}]$@";
    let align=$(tput cols)-${#message}+2*${#white}+2*${#none};
    _prev=$(printf "%s%${align}s" "${message}" "${white}[]${none}");
    printf "\r%s" "${_prev}";
}

function msg_done_before()
{
    printf "\r%s\b\b\b\b%s\n" "${_prev}" "${white}[${yellow}B4${white}]${none}";
}

function msg_skip()
{
    date=$(date +"%Y-%m-%d %H:%M:%S");
    message="[${date}]$@";
    let align=$(tput cols)-${#message}+3*${#white}+2*${#none}+${#cyan};
    printf "\r%s%${align}s\n" "${message}" "${white}[${cyan}SK${white}]${none}";
}

function msg_done()
{
    printf "\r%s\b\b\b\b%s\n" "${_prev}" "${white}[${green}OK${white}]${none}";
}

function msg_error()
{
    date=$(date +"%Y-%m-%d %H:%M:%S");
    message="[${date}]$@";
    printf "\r%s\b\b\b\b%s\n%s\n" "${_prev}" "${white}[${red}ER${white}]${none}" "${message}";
}

function check_source()
{
    src="$@";
    if [[ -d "${RB_WORKDIR}/temp/src/${src}" ]]; then
        return 0;
    fi;

    return 1;
}

function copy_source()
{
    name=$1;
    src=$2;
    mkdir -p "${RB_WORKDIR}/temp/src/${name}" || return 1;
    rmdir "${RB_WORKDIR}/temp/src/${name}" || return 1;
    cp -r "${src}/${name}" "${RB_WORKDIR}/temp/src/${name}" || return 1;
    return 0;
}

function unpack_source()
{
    name=$1;
    mkdir -p "${RB_WORKDIR}/temp/src/${name}" || return 2;
    rmdir "${RB_WORKDIR}/temp/src/${name}" &> /dev/null || return 1;
    tar xf "${RB_REPODIR}/sources/${name}"-[0-9]*.src.tar.gz -C "${RB_WORKDIR}/temp/src/${name%%/*}/" || return 2;
    return 0;
}

function pack_source()
{
    name=$1;
    mkdir -p "${RB_WORKDIR}/temp/pkg/${name}" || return 1;
    rmdir "${RB_WORKDIR}/temp/pkg/${name}" &> /dev/null || return 1;
    cd "${RB_WORKDIR}/temp/src/${name}";
    rb_makepkg -Af --source;
    mv *.src.* "${RB_WORKDIR}/temp/pkg/${name%%/*}/" || return 1;
    return 0;
}

function check_package()
{
    src="$@";
    if [[ -f "${RB_WORKDIR}/build/${src}/.skipped" ]]; then
        return 2;
    elif [[ -f "${RB_WORKDIR}/build/${src}/.installed" ]]; then
        return 1;
    fi;

    return 0;
}

function check_build()
{
    src="$@";
    if [[ -f "${RB_WORKDIR}/build/${src}/.built" ]]; then
        return 1;
    fi;

    return 0;
}

function run()
{
    src="$1";
    program="${*:2}";
    if [[ ${RB_AUTOBUILD_VERBOSE} == 1 ]]; then
        ${program};
    else
        ${program} &>> "${RB_WORKDIR}/temp/src/${src}/build.log";
    fi;
}

function show_log()
{
    src="$@";
    if [[ -f "${RB_WORKDIR}/temp/src/${src}/build.log" ]]; then
        cat "${RB_WORKDIR}/temp/src/${src}/build.log";
    fi;
}

function ask_continue()
{
    response="";
    while [[ ${response} != "c" && ${response} != "e" ]]; do
        echo -n "What you want to do? [${white}C${none}ontinue/${white}E${none}xit] ";
        read response;
    done;

    if [[ ${response} = "c" ]]; then
        return 0;
    fi;

    return 1;
}

function ask_copy()
{
    response="";
    while [[ ${response} != "a" && ${response} != "r" && ${response} != "s" && ${response} != "e" ]]; do
        echo -n "Which one do you want to copy? [${white}A${none}bs/a${white}R${none}m/${white}S${none}kip/${white}E${none}xit] ";
        read response;
    done;

    if [[ ${response} = "a" ]]; then
        return 3;

    elif [[ ${response} = "r" ]]; then
        return 2;
    elif [[ ${response} = "s" ]]; then
        return 1;
    fi;

    return 0;
}

function ask_retry()
{
    response="";
    while [[ ${response} != "r" && ${response} != "s" && ${response} != "e" ]]; do
        echo -n "What you want to do? [${white}R${none}etry/${white}S${none}kip/${white}E${none}xit] ";
        read response;
    done;

    if [[ ${response} = "r" ]]; then
        return 2;

    elif [[ ${response} = "s" ]]; then
        return 1;
    fi;

    return 0;
}

function ask_install()
{
    response="";
    while [[ ${response} != "i" && ${response} != "b" && ${response} != "e" ]]; do
        echo -n "What you want to do? [${white}I${none}nstall/${white}B${none}uild/${white}E${none}xit] ";
        read response;
    done;

    if [[ ${response} = "i" ]]; then
        return 2;

    elif [[ ${response} = "b" ]]; then
        return 1;
    fi;

    return 0;
}

function prepare_package()
{
    src="$@";
    if [[ -d "${RB_WORKDIR}/build/${src}" ]]; then
        rm -rf "${RB_WORKDIR}/build/${src}.bak" || return 1;
        mv "${RB_WORKDIR}/build/${src}" "${RB_WORKDIR}/build/${src}.bak" || return 1;
    fi;

    mkdir -p "${RB_WORKDIR}/build/${src}" || return 1;
    ln -s "${RB_WORKDIR}/temp/src/${src}/"* "${RB_WORKDIR}/build/${src}/" || return 1;
    return 0;
}

function download_sources()
{
    src="$@";
    rm -f "${RB_WORKDIR}/temp/src/${src}/build.log";
    run ${src} cd "${RB_WORKDIR}/temp/src/${src}" || return 1;
    run ${src} rb_clean || return 1;
    run ${src} rb_makepkg --verifysource -c || return 1;
    run ${src} rm -rf src || return 1;
    run ${src} rm -rf pkg || return 1;
    return 0;
}

function build_package()
{
    src="$@";
    run ${src} cd "${RB_WORKDIR}/build/${src}" || return 1;
    run ${src} rb_makepkg || return 1;
    run ${src} touch .built || return 1;
    return 0;
}

function install_package()
{
    src="$@";
    run ${src} cd "${RB_WORKDIR}/build/${src}" || return 1;
    run ${src} rb_install --noconfirm *.pkg.* || rb_install --force -dd *.pkg.* || return 1;
    run ${src} touch .installed || return 1;
    return 0;
}

# PACKAGES
RB_AUTOBUILD_PACKAGES=(
## MINIMAL
    'alarm/raspberrypi-firmware'
    'core/linux-api-headers'
    'core/tzdata'
    'core/iana-etc'
    'core/filesystem'
    'core/glibc'
    'core/attr'
    'core/acl'
    'core/libcap'
    'core/libffi'
    'core/ncurses'
    'core/readline'
    'core/bash'
    'core/gmp'
    'core/mpfr'
    'core/libmpc'
    'core/isl'
    'core/cloog'
    'core/zlib'
    'core/binutils'
    'core/gcc'
    'core/pambase'
    'core/libtirpc'
    'core/cracklib'
    'core/db'
    'core/m4'
    'core/flex'
    'core/pam'
    'core/gdbm'
    '#Change perl binding in scratchbox2'
    'core/perl'
    'core/openssl'
    'core/coreutils'
    'core/bzip2'
    'core/pcre'
    'core/xz'
    'core/shadow'
    'core/expat'
    'extra/sqlite'
    '#Change python2 binding in scratchbox2'
    'extra/python2'
    '#Change python binding in scratchbox2'
    'extra/python'
    'core/util-linux'
    'core/hwids'
    'core/glib2'
    'core/pkg-config'
    'extra/perl-xml-parser'
    'extra/intltool'
    'core/libgpg-error'
    'core/libgcrypt'
    'core/popt'
    'core/pciutils'
    'core/usbutils'
    'core/dbus_stage1'
    'core/gawk'
    'extra/check'
    'core/kbd'
    'extra/libseccomp'
    'core/systemd'
    'core/dbus'
    'core/libusb'
    'core/lvm2'
    'core/cryptsetup'
    'core/tar'
    'core/sed'
    'core/libtool'
    '#Add libtool binding in scratchbox2'
    'extra/libsigsegv'
    'core/diffutils'
    'core/autoconf'
    'core/automake'
    'alarm/uboot-mkimage'
    'core/linux-raspi'
    'core/linux-raspimc'
    '#Minimal system should be bootable now'
## SYSTEM UTILS
    'core/lzo2'
    'core/libssh2'
    'core/findutils'
    'core/run-parts'
    'core/ca-certificates'
    'core/curl'
    'core/libarchive'
    'core/libassuan'
    'core/pinentry'
    'core/libksba'
    'core/pth'
    'core/gnupg'
    'core/gpgme'
    'core/pacman'
    'aur/arm-mem-git'
    'core/less'
    'core/gzip'
    'core/texinfo'
    'extra/libidn'
    'extra/wget'
    'extra/lua'
    'extra/libxml2'
    'extra/shared-mime-info'
    'extra/vim'
    'extra/strace'
    'extra/lsof'
    'core/procps-ng'
    'extra/htop'
    'core/cronie'
    'core/libevent'
    'community/tmux'
    'core/grep'
    'core/hdparm'
    'core/logrotate'
    'core/procinfo-ng'
    'core/sudo'
    'core/psmisc'
    'core/file'
    'core/sysfsutils'
    'core/dosfstools'
    'core/e2fsprogs'
    'core/which'
    'core/make'
    'core/patch'
    'core/libedit'
    'extra/perl-html-tagset'
    'extra/perl-html-parser'
    'extra/ntp'
    'extra/libtasn1'
    'extra/nettle'
    'extra/p11-kit'
    'extra/gnutls'
    'core/keyutils'
    'extra/zsh'
    '#Useful system utils should be available now'
## NETWORKING
    'core/iptables'
    'core/iproute2'
    'extra/dhcp'
    'core/dhcpcd'
    'core/openresolv'
    'core/netctl'
    'core/wireless_tools'
    'core/libnl'
    'core/wpa_supplicant'
    'extra/python-setuptools'
    'community/python2-m2crypto'
    'core/wireless-regdb'
    'core/iw'
    'core/crda'
    'core/libpcap'
    'extra/tcpdump'
    'extra/nmap'
    'core/traceroute'
    'core/inetutils'
    'community/iperf'
    'extra/idnkit'
    'core/dnssec-anchors'
    'extra/dnsutils'
    'core/iputils'
    'core/ldns'
    'core/openssh'
    'community/pdnsd'
    'core/rpcbind'
    'core/nfs-utils'
    '#Networking tools should be available now'
## XBMC
    'extra/icu'
    'extra/boost'
    'extra/cmake'
    'extra/gperf'
    'extra/nasm'
    'extra/zip'
    'extra/perl-error'
    'extra/git'
    'extra/unrar'
    'extra/hicolor-icon-theme'
    'extra/fribidi'
    'extra/talloc'
    'extra/tevent'
    'extra/tdb'
    'extra/ldb'
    'extra/libbsd'
    'community/chrpath'
    'extra/iniparser'
    'extra/libaio'
    'extra/libcap-ng'
    'extra/cifs-utils'
    'extra/samba'
    'extra/libjpeg-turbo'
    'extra/libtiff'
    'extra/libpng'
    'extra/libcddb'
    'extra/libcdio'
    'extra/yajl'
    'extra/libogg'
    'extra/libvorbis'
    'extra/flac'
    'extra/alsa-lib'
    'extra/libsndfile'
    'extra/libsamplerate'
    'extra/libssh'
    'community/libmicrohttpd'
    'extra/sdl'
    'extra/sdl_image'
    'extra/freetype2'
    'extra/graphite'
    'extra/harfbuzz'
    'extra/fontconfig'
    'extra/recode'
    'extra/enca'
    'extra/libass'
    'extra/libmpeg2'
    'extra/libmad'
    'extra/libmodplug'
    'extra/jasper'
    'extra/rtmpdump'
    'extra/unzip'
    'extra/libbluray'
    'community/libnfs'
    'extra/libao'
    'community/libshairport'
    'extra/libdaemon'
    'extra/dbus-glib'
    'extra/dbus-python'
    'extra/avahi'
    'community/setconf'
    'community/tinyxml'
    'community/lockdev'
    'community/libcec'
    'extra/swig'
    'extra/libplist'
    'extra/taglib'
    'extra/libxslt'
    'aur/shairplay-git'
    'extra/nss-mdns'
    'extra/libical'
    'extra/bluez'
    'aur/anyremote'
    'alarm/xbmc-rbp-git'
    'aur/zramswap'
)

# RUN
main $@;
